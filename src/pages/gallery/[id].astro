---
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-types";

const id = Astro.params.id;

if (!id) {
    return Astro.redirect('/library');
}

let svg: SvgRecord | null = null;
let error: string | null = null;

try {
    svg = await pb.collection(Collections.Svg).getOne(id);
} catch (e) {
    error = "SVG non trouv√©";
    console.error("Erreur lors de la r√©cup√©ration du SVG:", e);
}

// Parser l'historique si disponible (supposant qu'il est stock√© en JSON)
let conversationHistory: Array<{role: string, content: string}> = [];
if (svg && svg.history) {
    try {
        conversationHistory = JSON.parse(svg.history);
    } catch (e) {
        console.error("Erreur lors du parsing de l'historique:", e);
    }
}
---

<Layout>
    <div class="h-screen bg-gradient-to-br from-purple-400 to-blue-500 flex flex-col">
        <div class="flex-none p-4">
            <!-- Header avec navigation -->
            <div class="flex justify-between items-center">
                <h1 class="text-3xl font-bold text-white">{svg?.name || 'SVG Details'}</h1>
                <div class="flex gap-2">
                    <a href="/library" class="btn btn-sm bg-purple-700 hover:bg-purple-800 text-white border-none">
                        ‚Üê Library
                    </a>
                    <a href="/generator" class="btn btn-sm bg-blue-600 hover:bg-blue-700 text-white border-none">
                        New SVG
                    </a>
                </div>
            </div>
        </div>

        {error ? (
            <!-- Message d'erreur -->
            <div class="flex-1 flex items-center justify-center p-8">
                <div class="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-lg max-w-md">
                    <h2 class="text-2xl font-bold mb-2">Error</h2>
                    <p>{error}</p>
                    <a href="/library" class="btn bg-red-600 hover:bg-red-700 text-white border-none mt-4">
                        Return to Library
                    </a>
                </div>
            </div>
        ) : svg && (
            <div class="flex-1 flex gap-4 p-4 overflow-hidden">
                <!-- Partie gauche : SVG Display -->
                <div class="w-1/2 flex flex-col gap-4">
                    <!-- SVG Preview -->
                    <div class="flex-1 bg-white rounded-lg shadow-xl p-6 flex items-center justify-center overflow-auto">
                        <div id="svg-display" set:html={svg.code} class="max-w-full max-h-full" />
                    </div>
                    
                    <!-- Actions -->
                    <div class="flex-none bg-white rounded-lg shadow-xl p-4">
                        <div class="flex gap-2 justify-end">
                            <button 
                                class="btn btn-sm bg-blue-600 hover:bg-blue-700 text-white border-none"
                                id="copy-code-btn"
                            >
                                üìã Copy Code
                            </button>
                            <button 
                                class="btn btn-sm bg-green-600 hover:bg-green-700 text-white border-none"
                                id="download-svg-btn"
                            >
                                üíæ Download
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Partie droite : Chat Interface -->
                <div class="w-1/2 bg-white rounded-lg shadow-xl flex flex-col overflow-hidden">
                    <!-- Chat Header -->
                    <div class="flex-none p-4 bg-gradient-to-r from-purple-600 to-blue-600">
                        <h3 class="text-xl font-bold text-white">Chat History</h3>
                        <p class="text-sm text-white/80">Conversation with AI</p>
                    </div>
                    
                    <div class="divider my-0"></div>
                    
                    <!-- Chat History -->
                    <div id="chat-history" class="flex flex-col gap-4 p-4 overflow-y-auto flex-grow">
                        {
                            (Array.isArray(conversationHistory) && conversationHistory.length > 0) ? (
                                conversationHistory.map((msg: { role: string; content: string; }) => (
                                    <div class={`chat ${msg.role === 'user' ? 'chat-end' : 'chat-start'}`}>
                                        <div class="chat-header opacity-60 text-xs mb-1">
                                            {msg.role === 'user' ? 'üë§ User' : 'ü§ñ Assistant'}
                                        </div>
                                        <div class={`chat-bubble ${msg.role === 'user' ? 'bg-primary text-primary-content' : 'bg-secondary text-secondary-content'}`}>
                                            <pre class="whitespace-pre-wrap text-sm">{msg.content}</pre>
                                        </div>
                                        <div class="chat-footer opacity-60 text-xs mt-1">{msg.role}</div>
                                    </div>
                                ))
                            ) : (
                                <div class="flex items-center justify-center h-full">
                                    <span class="text-error text-center">
                                        <p class="text-2xl mb-2">üí¨</p>
                                        <p>Aucun historique de chat disponible.</p>
                                    </span>
                                </div>
                            )
                        }
                    </div>
                    
                    <div class="divider my-0"></div>
                    
                    <!-- Chat Input -->
                    <div class="flex-none p-4 bg-gray-50">
                        <form id="chat-form" class="flex gap-2">
                            <input 
                                type="text" 
                                id="chat-input"
                                placeholder="Type a message to modify the SVG..." 
                                class="input input-bordered flex-1"
                            />
                            <button 
                                type="submit"
                                class="btn bg-purple-600 hover:bg-purple-700 text-white border-none"
                                id="send-btn"
                            >
                                Send
                            </button>
                        </form>
                        <p class="text-xs text-gray-500 mt-2">üí° Enter a prompt to modify the SVG</p>
                    </div>
                </div>
            </div>
        )}
    </div>
</Layout>

<script define:vars={{ svgCode: svg?.code, svgName: svg?.name, svgId: svg?.id, initialHistory: conversationHistory }}>
    //@ts-nocheck
    
    // Historique de conversation (copie de l'historique initial)
    let conversationHistory = [...initialHistory];
    
    // Copier le code dans le presse-papier
    const copyBtn = document.getElementById('copy-code-btn');
    if (copyBtn && svgCode) {
        copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(svgCode);
            copyBtn.textContent = '‚úÖ Copied!';
            setTimeout(() => {
                copyBtn.textContent = 'üìã Copy Code';
            }, 2000);
        });
    }

    // T√©l√©charger le SVG
    const downloadBtn = document.getElementById('download-svg-btn');
    if (downloadBtn && svgCode && svgName) {
        downloadBtn.addEventListener('click', () => {
            const blob = new Blob([svgCode], { type: 'image/svg+xml' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${svgName}.svg`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            downloadBtn.textContent = '‚úÖ Downloaded!';
            setTimeout(() => {
                downloadBtn.textContent = 'üíæ Download';
            }, 2000);
        });
    }

    // Gestion du chat
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-input');
    const chatHistory = document.getElementById('chat-history');
    const svgDisplay = document.getElementById('svg-display');
    const sendBtn = document.getElementById('send-btn');

    // Ajouter un message dans l'historique visuel
    function addMessageToUI(role, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat ${role === 'user' ? 'chat-end' : 'chat-start'}`;
        
        messageDiv.innerHTML = `
            <div class="chat-header opacity-60 text-xs mb-1">
                ${role === 'user' ? 'üë§ User' : 'ü§ñ Assistant'}
            </div>
            <div class="chat-bubble ${role === 'user' ? 'bg-primary text-primary-content' : 'bg-secondary text-secondary-content'}">
                <pre class="whitespace-pre-wrap text-sm">${content}</pre>
            </div>
            <div class="chat-footer opacity-60 text-xs mt-1">${role}</div>
        `;
        
        chatHistory.appendChild(messageDiv);
        chatHistory.scrollTop = chatHistory.scrollHeight;
    }

    // Fonction pour g√©n√©rer le SVG modifi√©
    async function generateSVG(messages) {
        try {
            const response = await fetch('/api/generateSVG', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(messages)
            });

            const data = await response.json();
            return data.svg;
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration:', error);
            throw error;
        }
    }

    // Fonction pour mettre √† jour le SVG dans PocketBase
    async function updateSVGInDatabase(newCode, newHistory) {
        try {
            const response = await fetch('/api/updateSVG', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    id: svgId,
                    code: newCode,
                    history: JSON.stringify(newHistory)
                })
            });

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Erreur lors de la mise √† jour:', error);
            throw error;
        }
    }

    // √âcouteur d'√©v√©nement pour le formulaire de soumission
    chatForm?.addEventListener('submit', async (e) => {
        e.preventDefault(); // Emp√™che le rechargement de la page
        
        const userMessage = chatInput.value.trim();
        if (!userMessage) return;

        console.log("üìù Nouveau message:", userMessage);

        // Cr√©ez un objet pour le prompt de l'utilisateur
        let prompt = {
            role: 'user',
            content: userMessage
        };

        // R√©cup√©rez l'historique des messages
        let history = [...conversationHistory];
        history.push(prompt); // Ajoutez le nouveau prompt √† l'historique

        // R√©initialisez le champ de saisie
        chatInput.value = '';

        // D√©sactiver l'input pendant le traitement
        chatInput.disabled = true;
        sendBtn.disabled = true;
        sendBtn.textContent = 'Sending...';

        // Affichez un indicateur de chargement
        svgDisplay.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        
        // Ajoutez le prompt √† l'historique du chat
        chatHistory.innerHTML += `
            <div class="chat chat-end">
                <div class="chat-header opacity-60 text-xs mb-1">üë§ User</div>
                <div class="chat-bubble bg-primary text-primary-content">
                    <pre class="whitespace-pre-wrap text-sm">${prompt.content}</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">user</div>
            </div>
        `;

        try {
            // Appelez la fonction pour g√©n√©rer le SVG
            let aiResponse = await generateSVG(history);
            
            // Extraire le SVG de la r√©ponse
            const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
            const svgCode = svgMatch ? svgMatch[0] : aiResponse.content;
            
            // Mettre √† jour la r√©ponse avec seulement le code SVG extrait
            aiResponse.content = svgCode;
            
            // Ajoutez la r√©ponse de l'IA √† l'historique
            history.push(aiResponse);

            console.log("svgCode: ", svgCode);
            
            // Mettez √† jour l'affichage du SVG
            svgDisplay.innerHTML = svgCode;

            // Ajoutez le code SVG √† l'historique du chat
            chatHistory.innerHTML += `
                <div class="chat chat-start">
                    <div class="chat-header opacity-60 text-xs mb-1">ü§ñ Assistant</div>
                    <div class="chat-bubble bg-secondary text-secondary-content">
                        <pre class="whitespace-pre-wrap text-sm">${svgCode}</pre>
                    </div>
                    <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
                </div>
            `;

            // Scroll vers le bas
            chatHistory.scrollTop = chatHistory.scrollHeight;

            // Mettre √† jour l'historique global
            conversationHistory = history;

            // Sauvegarder dans la base de donn√©es
            await updateSVGInDatabase(svgCode, history);
            
            console.log('‚úÖ SVG mis √† jour avec succ√®s');
        } catch (error) {
            console.error('‚ùå Erreur:', error);
            chatHistory.innerHTML += `
                <div class="chat chat-start">
                    <div class="chat-header opacity-60 text-xs mb-1">ü§ñ Assistant</div>
                    <div class="chat-bubble bg-error text-error-content">
                        <pre class="whitespace-pre-wrap text-sm">D√©sol√©, une erreur est survenue lors de la g√©n√©ration.</pre>
                    </div>
                    <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
                </div>
            `;
            svgDisplay.innerHTML = svgCode; // Restaurer le SVG original
        } finally {
            // R√©activer l'input
            chatInput.disabled = false;
            sendBtn.disabled = false;
            sendBtn.textContent = 'Send';
            chatInput.focus();
        }
    });
</script>
